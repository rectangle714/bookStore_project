plugins {
	id 'java'
	id 'java-library'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
}

group 'com'
version = '1.0.0'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	/** Query DSL 추가 **/
	// QueryDsl 사용 라이브러리 (Q클래스 생성 안됨)
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	// Q클래스 생성 라이브러리
	implementation 'com.querydsl:querydsl-apt'
	// @Entity 어노테이션을 선언한 클래스 탐색하고 Q클래스 생성
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	// Q파일을 찾지 못해서 발생하는 java.lang.NoClassDefFoundError 에러 대응 코드
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	/*runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'*/
	runtimeOnly 'com.h2database:h2'

	// Lombok 추가
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Jwt 추가
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'

	// retrofit2
	implementation 'com.squareup.retrofit2:retrofit:(insert latest version)'
	// 요청,응답 객체를 파싱해주는 라이브러리(gson을 이용함)
	implementation 'com.squareup.retrofit2:converter-gson:2.7.2'
	// 선택사항 : http 통신 로그를 출력한다
	implementation 'com.squareup.okhttp3:logging-interceptor:3.9.0'

	// json 추가
	implementation 'org.json:json:20231013'

	// OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// spring mail
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '3.0.5'
	implementation 'javax.mail:javax.mail-api:1.6.2'
	// javax.mail:javax.mail-api 라이브러리는 구현체가 포함되어 있지 않아서 구현체 라이브러리 추가
	implementation group: 'com.sun.mail', name: 'imap', version: '2.0.1'

	// mapstruct 추가
	implementation 'org.mapstruct:mapstruct:1.5.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"


	// Junit lombok 사용을 위한 추가
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

/** QueryDsl 설정 **/
// gradle build 시 QClass 소스도 함께 build 하기 위해서 sourceSets에 해당 위치를 추가.
def generated = 'src/main/generated'
sourceSets {
	main {
		java {
			srcDirs += [ 'src/main/java', generated ]
		}
	}
}

// 자바 9 외 버전에서 사용할 수 있도록 import 설정
compileJava {
	options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=javax.annotation.Generated'
}

// src/main/generated에 annotation processors가 만든 QClass들을 저장
tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory  = file(generated)
}
// clean 실행 시 생성된 QClass 삭제
clean {
	delete file(generated)
}
/****/

tasks.named('test') {
	useJUnitPlatform()
}